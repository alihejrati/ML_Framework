generator_step:
  forward:
    - input: [z, randn, [$zdim, 1, 1]]    # input z
    - input: [y, randint, 0, $nclass, []] # input y
    - seq0
    - Return: GLOSS
  
  seq0:
    input:
    output: GLOSS
    head:
      - BB.Self:
          fn: generator
          input: [z, y]
      - BB.Self:
          fn: discriminator
          input: [y, [x]]
      - .squeeze
      - BB.Self:
          fn: generatorLoss
          input: [[d_fake]]
          params:
            Real: $R_VAL

discriminator_step:
  forward:
    - input: [z, randn, [$zdim, 1, 1]]    # input z
    - input: [y, randint, 0, $nclass, []] # input y
    - seq0
    - seq1
    - seq2
    - Return: DLOSS
  
  seq0:
    input: X
    output: d_real
    head:
      - .long
      - ..F.one_hot:
          num_classes: $ncluster
      - ..einops.rearrange:
          pattern: b h w c -> b c h w
      - .contiguous
      - .float
      - BB.Self:
          fn: discriminator
          input: [y, [x]]
      - .squeeze

  seq1:
    input:
    output: d_fake
    head:
      - BB.Self:
          fn: generator
          input: [y, z]
      - .detach
      - BB.Self:
          fn: discriminator
          input: [y, [x]]
      - .squeeze
  
  seq2:
    input:
    output: DLOSS
    head:
      - BB.Self:
          fn: discriminatorLoss
          input: [d_fake, d_real]
          params:
            Fake: $G_VAL
            Real: $R_VAL